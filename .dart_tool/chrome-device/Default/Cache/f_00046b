define(['dart_sdk', 'packages/flutter/src/rendering/sliver_multi_box_adaptor.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/rendering/sliver.dart', 'packages/flutter/src/painting/basic_types.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter_staggered_grid_view/src/rendering/tile_container_render_object_mixin.dart', 'packages/flutter/src/gestures/hit_test.dart'], (function load__packages__flutter_staggered_grid_view__src__rendering__sliver_variable_size_box_adaptor_dart(dart_sdk, packages__flutter__src__rendering__sliver_multi_box_adaptor$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__rendering__sliver$46dart, packages__flutter__src__painting__basic_types$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter_staggered_grid_view__src__rendering__tile_container_render_object_mixin$46dart, packages__flutter__src__gestures__hit_test$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const sliver_multi_box_adaptor = packages__flutter__src__rendering__sliver_multi_box_adaptor$46dart.src__rendering__sliver_multi_box_adaptor;
  const box = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const sliver = packages__flutter__src__rendering__sliver$46dart.src__rendering__sliver;
  const basic_types = packages__flutter__src__painting__basic_types$46dart.src__painting__basic_types;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const tile_container_render_object_mixin = packages__flutter_staggered_grid_view__src__rendering__tile_container_render_object_mixin$46dart.src__rendering__tile_container_render_object_mixin;
  const hit_test = packages__flutter__src__gestures__hit_test$46dart.src__gestures__hit_test;
  var sliver_variable_size_box_adaptor = Object.create(dart.library);
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $values = dartx.values;
  var $forEach = dartx.forEach;
  var $clear = dartx.clear;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $length = dartx.length;
  var $toSet = dartx.toSet;
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $isEmpty = dartx.isEmpty;
  var $join = dartx.join;
  var $add = dartx.add;
  var $isNotEmpty = dartx.isNotEmpty;
  var $keys = dartx.keys;
  var $sort = dartx.sort;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfint$RenderBox: () => (T.IdentityMapOfint$RenderBox = dart.constFn(_js_helper.IdentityMap$(core.int, box.RenderBox)))(),
    SliverConstraintsTovoid: () => (T.SliverConstraintsTovoid = dart.constFn(dart.fnType(dart.void, [sliver.SliverConstraints])))(),
    RenderBoxTovoid: () => (T.RenderBoxTovoid = dart.constFn(dart.fnType(dart.void, [box.RenderBox])))(),
    RenderBoxTobool: () => (T.RenderBoxTobool = dart.constFn(dart.fnType(core.bool, [box.RenderBox])))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.horizontal",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: basic_types.Axis.prototype,
        [_name]: "Axis.vertical",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: -1,
        [OffsetBase__dx]: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 1
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.up",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 1,
        [OffsetBase__dx]: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.right",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.down",
        index: 2
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: -1
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: basic_types.AxisDirection.prototype,
        [_name]: "AxisDirection.left",
        index: 3
      });
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "package:flutter_staggered_grid_view/src/rendering/sliver_variable_size_box_adaptor.dart",
    "file:///C:/Users/rapha/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/flutter_staggered_grid_view-0.4.0/lib/src/rendering/sliver_variable_size_box_adaptor.dart"
  ];
  sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager = class RenderSliverVariableSizeBoxChildManager extends core.Object {
    didStartLayout() {
    }
    didFinishLayout() {
    }
    debugAssertChildListLocked() {
      return true;
    }
  };
  (sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager.new = function() {
    ;
  }).prototype = sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager.prototype;
  dart.addTypeTests(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager);
  dart.addTypeCaches(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager);
  dart.setMethodSignature(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager, () => ({
    __proto__: dart.getMethods(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager.__proto__),
    didStartLayout: dart.fnType(dart.void, []),
    didFinishLayout: dart.fnType(dart.void, []),
    debugAssertChildListLocked: dart.fnType(core.bool, [])
  }));
  dart.setLibraryUri(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager, I[0]);
  var __SliverVariableSizeBoxAdaptorParentData_crossAxisOffset = dart.privateName(sliver_variable_size_box_adaptor, "_#SliverVariableSizeBoxAdaptorParentData#crossAxisOffset");
  var _keptAlive = dart.privateName(sliver_variable_size_box_adaptor, "_keptAlive");
  sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData = class SliverVariableSizeBoxAdaptorParentData extends sliver_multi_box_adaptor.SliverMultiBoxAdaptorParentData {
    get crossAxisOffset() {
      let t0;
      t0 = this[__SliverVariableSizeBoxAdaptorParentData_crossAxisOffset];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("crossAxisOffset")) : t0;
    }
    set crossAxisOffset(t0) {
      this[__SliverVariableSizeBoxAdaptorParentData_crossAxisOffset] = t0;
    }
    toString() {
      return "crossAxisOffset=" + dart.str(this.crossAxisOffset) + "; " + super.toString();
    }
  };
  (sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.new = function() {
    this[__SliverVariableSizeBoxAdaptorParentData_crossAxisOffset] = null;
    this[_keptAlive] = false;
    sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.__proto__.new.call(this);
    ;
  }).prototype = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.prototype;
  dart.addTypeTests(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData);
  dart.addTypeCaches(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData);
  dart.setGetterSignature(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, () => ({
    __proto__: dart.getGetters(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.__proto__),
    crossAxisOffset: core.double
  }));
  dart.setSetterSignature(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, () => ({
    __proto__: dart.getSetters(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.__proto__),
    crossAxisOffset: core.double
  }));
  dart.setLibraryUri(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, I[0]);
  dart.setFieldSignature(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, () => ({
    __proto__: dart.getFields(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.__proto__),
    [__SliverVariableSizeBoxAdaptorParentData_crossAxisOffset]: dart.fieldType(dart.nullable(core.double)),
    [_keptAlive]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData, ['toString']);
  var _keepAliveBucket = dart.privateName(sliver_variable_size_box_adaptor, "_keepAliveBucket");
  var _childManager = dart.privateName(sliver_variable_size_box_adaptor, "_childManager");
  var _debugAssertChildListLocked = dart.privateName(sliver_variable_size_box_adaptor, "_debugAssertChildListLocked");
  var _createOrObtainChild = dart.privateName(sliver_variable_size_box_adaptor, "_createOrObtainChild");
  var _destroyOrCacheChild = dart.privateName(sliver_variable_size_box_adaptor, "_destroyOrCacheChild");
  var _name = dart.privateName(basic_types, "_name");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  const RenderSliver_TileContainerRenderObjectMixin$36 = class RenderSliver_TileContainerRenderObjectMixin extends sliver.RenderSliver {};
  (RenderSliver_TileContainerRenderObjectMixin$36.new = function() {
    tile_container_render_object_mixin.TileContainerRenderObjectMixin$(box.RenderBox, sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData)[dart.mixinNew].call(this);
    RenderSliver_TileContainerRenderObjectMixin$36.__proto__.new.call(this);
  }).prototype = RenderSliver_TileContainerRenderObjectMixin$36.prototype;
  dart.applyMixin(RenderSliver_TileContainerRenderObjectMixin$36, tile_container_render_object_mixin.TileContainerRenderObjectMixin$(box.RenderBox, sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData));
  const RenderSliver_RenderSliverWithKeepAliveMixin$36 = class RenderSliver_RenderSliverWithKeepAliveMixin extends RenderSliver_TileContainerRenderObjectMixin$36 {};
  (RenderSliver_RenderSliverWithKeepAliveMixin$36.new = function() {
    RenderSliver_RenderSliverWithKeepAliveMixin$36.__proto__.new.call(this);
  }).prototype = RenderSliver_RenderSliverWithKeepAliveMixin$36.prototype;
  dart.applyMixin(RenderSliver_RenderSliverWithKeepAliveMixin$36, sliver_multi_box_adaptor.RenderSliverWithKeepAliveMixin);
  const RenderSliver_RenderSliverHelpers$36 = class RenderSliver_RenderSliverHelpers extends RenderSliver_RenderSliverWithKeepAliveMixin$36 {};
  (RenderSliver_RenderSliverHelpers$36.new = function() {
    RenderSliver_RenderSliverHelpers$36.__proto__.new.call(this);
  }).prototype = RenderSliver_RenderSliverHelpers$36.prototype;
  dart.applyMixin(RenderSliver_RenderSliverHelpers$36, sliver.RenderSliverHelpers);
  sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor = class RenderSliverVariableSizeBoxAdaptor extends RenderSliver_RenderSliverHelpers$36 {
    setupParentData(child) {
      object.RenderObject.as(child);
      if (!sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.is(child.parentData)) {
        child.parentData = new sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.new();
      }
    }
    get childManager() {
      return this[_childManager];
    }
    adoptChild(child) {
      object.RenderObject.as(child);
      super.adoptChild(child);
      let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
      if (!childParentData[_keptAlive]) {
        this.childManager.didAdoptChild(box.RenderBox.as(child));
      }
    }
    [_debugAssertChildListLocked]() {
      return this.childManager.debugAssertChildListLocked();
    }
    remove(index) {
      let child = this._get(index);
      if (child == null) {
        let cachedChild = this[_keepAliveBucket][$_get](index);
        if (cachedChild != null) {
          this.dropChild(cachedChild);
          this[_keepAliveBucket][$remove](index);
        }
        return;
      }
      let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
      if (!childParentData[_keptAlive]) {
        super.remove(index);
        return;
      }
      if (!dart.equals(this[_keepAliveBucket][$_get](dart.nullCheck(childParentData.index)), child)) dart.assertFailed(null, I[1], 227, 12, "_keepAliveBucket[childParentData.index!] == child");
      this[_keepAliveBucket][$remove](childParentData.index);
      this.dropChild(child);
    }
    removeAll() {
      super.removeAll();
      this[_keepAliveBucket][$values][$forEach](dart.bind(this, 'dropChild'));
      this[_keepAliveBucket][$clear]();
    }
    [_createOrObtainChild](index) {
      this.invokeLayoutCallback(sliver.SliverConstraints, dart.fn(constraints => {
        if (!constraints._equals(this.constraints)) dart.assertFailed(null, I[1], 241, 14, "constraints == this.constraints");
        if (this[_keepAliveBucket][$containsKey](index)) {
          let child = dart.nullCheck(this[_keepAliveBucket][$remove](index));
          let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
          if (!childParentData[_keptAlive]) dart.assertFailed(null, I[1], 246, 16, "childParentData._keptAlive");
          this.dropChild(child);
          child.parentData = childParentData;
          this._set(index, child);
          childParentData[_keptAlive] = false;
        } else {
          this[_childManager].createChild(index);
        }
      }, T.SliverConstraintsTovoid()));
    }
    [_destroyOrCacheChild](index) {
      let child = dart.nullCheck(this._get(index));
      let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
      if (childParentData.keepAlive) {
        if (!!childParentData[_keptAlive]) dart.assertFailed(null, I[1], 262, 14, "!childParentData._keptAlive");
        this.remove(index);
        this[_keepAliveBucket][$_set](dart.nullCheck(childParentData.index), child);
        child.parentData = childParentData;
        super.adoptChild(child);
        childParentData[_keptAlive] = true;
      } else {
        if (!dart.equals(child.parent, this)) dart.assertFailed(null, I[1], 269, 14, "child.parent == this");
        this[_childManager].removeChild(child);
        if (!(child.parent == null)) dart.assertFailed(null, I[1], 271, 14, "child.parent == null");
      }
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      super.attach(owner);
      this[_keepAliveBucket][$values][$forEach](dart.fn(child => child.attach(owner), T.RenderBoxTovoid()));
    }
    detach() {
      super.detach();
      this[_keepAliveBucket][$values][$forEach](dart.fn(child => child.detach(), T.RenderBoxTovoid()));
    }
    redepthChildren() {
      super.redepthChildren();
      this[_keepAliveBucket][$values][$forEach](dart.bind(this, 'redepthChild'));
    }
    visitChildren(visitor) {
      super.visitChildren(visitor);
      this[_keepAliveBucket][$values][$forEach](visitor);
    }
    addChild(index) {
      if (!this[_debugAssertChildListLocked]()) dart.assertFailed(null, I[1], 300, 12, "_debugAssertChildListLocked()");
      this[_createOrObtainChild](index);
      let child = this._get(index);
      if (child != null) {
        if (!(this.indexOf(child) === index)) dart.assertFailed(null, I[1], 304, 14, "indexOf(child) == index");
        return true;
      }
      this.childManager.setDidUnderflow(true);
      return false;
    }
    addAndLayoutChild(index, childConstraints, opts) {
      let parentUsesSize = opts && 'parentUsesSize' in opts ? opts.parentUsesSize : false;
      if (!this[_debugAssertChildListLocked]()) dart.assertFailed(null, I[1], 316, 12, "_debugAssertChildListLocked()");
      this[_createOrObtainChild](index);
      let child = this._get(index);
      if (child != null) {
        if (!(this.indexOf(child) === index)) dart.assertFailed(null, I[1], 320, 14, "indexOf(child) == index");
        child.layout(childConstraints, {parentUsesSize: parentUsesSize});
        return child;
      }
      this.childManager.setDidUnderflow(true);
      return null;
    }
    collectGarbage(visibleIndices) {
      if (!this[_debugAssertChildListLocked]()) dart.assertFailed(null, I[1], 339, 12, "_debugAssertChildListLocked()");
      if (!(this.childCount >= visibleIndices[$length])) dart.assertFailed(null, I[1], 340, 12, "childCount >= visibleIndices.length");
      this.invokeLayoutCallback(sliver.SliverConstraints, dart.fn(constraints => {
        this.indices[$toSet]().difference(visibleIndices)[$forEach](dart.bind(this, _destroyOrCacheChild));
        this[_keepAliveBucket][$values][$where](dart.fn(child => {
          let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
          return !childParentData.keepAlive;
        }, T.RenderBoxTobool()))[$toList]()[$forEach](dart.bind(this[_childManager], 'removeChild'));
        if (!this[_keepAliveBucket][$values][$where](dart.fn(child => {
          let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
          return !childParentData.keepAlive;
        }, T.RenderBoxTobool()))[$isEmpty]) dart.assertFailed(null, I[1], 356, 14, "_keepAliveBucket.values.where((RenderBox child) {\r\n        final childParentData =\r\n            child.parentData! as SliverVariableSizeBoxAdaptorParentData;\r\n        return !childParentData.keepAlive;\r\n      }).isEmpty");
      }, T.SliverConstraintsTovoid()));
    }
    indexOf(child) {
      let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
      if (!(childParentData.index != null)) dart.assertFailed(null, I[1], 369, 12, "childParentData.index != null");
      return dart.nullCheck(childParentData.index);
    }
    paintExtentOf(child) {
      if (!child.hasSize) dart.assertFailed(null, I[1], 377, 12, "child.hasSize");
      switch (this.constraints.axis) {
        case C[0] || CT.C0:
        {
          return child.size.width;
        }
        case C[1] || CT.C1:
        {
          return child.size.height;
        }
      }
    }
    hitTestChildren(result, opts) {
      let mainAxisPosition = opts && 'mainAxisPosition' in opts ? opts.mainAxisPosition : null;
      let crossAxisPosition = opts && 'crossAxisPosition' in opts ? opts.crossAxisPosition : null;
      for (let child of this.children) {
        if (this.hitTestBoxChild(new box.BoxHitTestResult.wrap(result), child, {mainAxisPosition: mainAxisPosition, crossAxisPosition: crossAxisPosition})) {
          return true;
        }
      }
      return false;
    }
    childMainAxisPosition(child) {
      box.RenderBox.as(child);
      return dart.nullCheck(this.childScrollOffset(child)) - this.constraints.scrollOffset;
    }
    childCrossAxisPosition(child) {
      box.RenderBox.as(child);
      let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
      return childParentData.crossAxisOffset;
    }
    childScrollOffset(child) {
      object.RenderObject.as(child);
      if (!dart.equals(child.parent, this)) dart.assertFailed(null, I[1], 413, 12, "child.parent == this");
      let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
      if (!(childParentData.layoutOffset != null)) dart.assertFailed(null, I[1], 416, 12, "childParentData.layoutOffset != null");
      return childParentData.layoutOffset;
    }
    applyPaintTransform(child, transform) {
      object.RenderObject.as(child);
      this.applyPaintTransformForBoxChild(box.RenderBox.as(child), transform);
    }
    paint(context, offset) {
      if (this.childCount === 0) {
        return;
      }
      let mainAxisUnit = null;
      let crossAxisUnit = null;
      let originOffset = null;
      let addExtent = null;
      switch (sliver.applyGrowthDirectionToAxisDirection(this.constraints.axisDirection, this.constraints.growthDirection)) {
        case C[4] || CT.C4:
        {
          mainAxisUnit = C[2] || CT.C2;
          crossAxisUnit = C[3] || CT.C3;
          originOffset = offset['+'](new ui.Offset.new(0.0, dart.nullCheck(this.geometry).paintExtent));
          addExtent = true;
          break;
        }
        case C[6] || CT.C6:
        {
          mainAxisUnit = C[3] || CT.C3;
          crossAxisUnit = C[5] || CT.C5;
          originOffset = offset;
          addExtent = false;
          break;
        }
        case C[7] || CT.C7:
        {
          mainAxisUnit = C[5] || CT.C5;
          crossAxisUnit = C[3] || CT.C3;
          originOffset = offset;
          addExtent = false;
          break;
        }
        case C[9] || CT.C9:
        {
          mainAxisUnit = C[8] || CT.C8;
          crossAxisUnit = C[5] || CT.C5;
          originOffset = offset['+'](new ui.Offset.new(dart.nullCheck(this.geometry).paintExtent, 0.0));
          addExtent = true;
          break;
        }
      }
      for (let child of this.children) {
        let mainAxisDelta = this.childMainAxisPosition(child);
        let crossAxisDelta = this.childCrossAxisPosition(child);
        let childOffset = new ui.Offset.new(originOffset.dx + mainAxisUnit.dx * mainAxisDelta + crossAxisUnit.dx * crossAxisDelta, originOffset.dy + mainAxisUnit.dy * mainAxisDelta + crossAxisUnit.dy * crossAxisDelta);
        if (dart.test(addExtent)) {
          childOffset = childOffset['+'](mainAxisUnit['*'](this.paintExtentOf(child)));
        }
        context.paintChild(child, childOffset);
      }
    }
    debugFillProperties(properties) {
      super.debugFillProperties(properties);
      properties.add(diagnostics.DiagnosticsNode.message(this.childCount > 0 ? "currently live children: " + this.indices[$join](",") : "no children current live"));
    }
    debugDescribeChildren() {
      let t1;
      let childList = T.JSArrayOfDiagnosticsNode().of([]);
      if (this.childCount > 0) {
        for (let child of this.children) {
          let childParentData = sliver_variable_size_box_adaptor.SliverVariableSizeBoxAdaptorParentData.as(dart.nullCheck(child.parentData));
          childList[$add](child.toDiagnosticsNode({name: "child with index " + dart.str(childParentData.index)}));
        }
      }
      if (this[_keepAliveBucket][$isNotEmpty]) {
        let indices = (t1 = this[_keepAliveBucket][$keys][$toList](), (() => {
          t1[$sort]();
          return t1;
        })());
        for (let index of indices) {
          childList[$add](dart.nullCheck(this[_keepAliveBucket][$_get](index)).toDiagnosticsNode({name: "child with index " + dart.str(index) + " (kept alive offstage)", style: diagnostics.DiagnosticsTreeStyle.offstage}));
        }
      }
      return childList;
    }
  };
  (sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.new = function(opts) {
    let childManager = opts && 'childManager' in opts ? opts.childManager : null;
    this[_keepAliveBucket] = new (T.IdentityMapOfint$RenderBox()).new();
    this[_childManager] = childManager;
    sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.__proto__.new.call(this);
    ;
  }).prototype = sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.prototype;
  dart.addTypeTests(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor);
  dart.addTypeCaches(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor);
  dart.setMethodSignature(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor, () => ({
    __proto__: dart.getMethods(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.__proto__),
    [_debugAssertChildListLocked]: dart.fnType(core.bool, []),
    [_createOrObtainChild]: dart.fnType(dart.void, [core.int]),
    [_destroyOrCacheChild]: dart.fnType(dart.void, [core.int]),
    addChild: dart.fnType(core.bool, [core.int]),
    addAndLayoutChild: dart.fnType(dart.nullable(box.RenderBox), [core.int, box.BoxConstraints], {parentUsesSize: core.bool}, {}),
    collectGarbage: dart.fnType(dart.void, [core.Set$(core.int)]),
    indexOf: dart.fnType(core.int, [box.RenderBox]),
    paintExtentOf: dart.fnType(core.double, [box.RenderBox]),
    hitTestChildren: dart.fnType(core.bool, [hit_test.HitTestResult], {}, {crossAxisPosition: core.double, mainAxisPosition: core.double})
  }));
  dart.setGetterSignature(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor, () => ({
    __proto__: dart.getGetters(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.__proto__),
    childManager: sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager
  }));
  dart.setLibraryUri(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor, I[0]);
  dart.setFieldSignature(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor, () => ({
    __proto__: dart.getFields(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxAdaptor.__proto__),
    [_childManager]: dart.finalFieldType(sliver_variable_size_box_adaptor.RenderSliverVariableSizeBoxChildManager),
    [_keepAliveBucket]: dart.finalFieldType(core.Map$(core.int, box.RenderBox))
  }));
  dart.trackLibraries("packages/flutter_staggered_grid_view/src/rendering/sliver_variable_size_box_adaptor.dart", {
    "package:flutter_staggered_grid_view/src/rendering/sliver_variable_size_box_adaptor.dart": sliver_variable_size_box_adaptor
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["sliver_variable_size_box_adaptor.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/flutter_staggered_grid_view/src/rendering/sliver_variable_size_box_adaptor.dart.lib.js"}');
  // Exports:
  return {
    src__rendering__sliver_variable_size_box_adaptor: sliver_variable_size_box_adaptor
  };
}));

//# sourceMappingURL=sliver_variable_size_box_adaptor.dart.lib.js.map
